function callingAjax(e,t,a,l){$.ajax({type:e,url:t,success:a,error:l})}$(document).ready(function(){date=getDate();var e=[];"undefined"!=typeof Storage&&(e=JSON.parse(localStorage.getItem("details")),null===e?e=[]:void 0===e.length&&(e=[e])),$("#calendar").draggable(),$("#calendar").fullCalendar({header:{left:"prev,next",center:"title",right:"month"},defaultDate:date,editable:!1,eventLimit:!0,events:e}),$("#txtDates").datepicker({autoSize:!0}),initialize()});var calendarRefresh=function(){var e=[];"undefined"!=typeof Storage&&(e=JSON.parse(localStorage.getItem("details")),null===e?e=[]:void 0===e.length&&(e=[e])),$("#calendar").fullCalendar("removeEvents"),$("#calendar").fullCalendar("addEventSource",e)},initialize=function(){$("#btnAdd").click(function(){if("undefined"!=typeof Storage){var e=$("#txtDates").val();if(e=new Date(e),"Invalid Date"==e)return $("#txtDates").val("Select date"),!1;var t=JSON.parse(localStorage.getItem("details"));if(null!==t)if(console.log(t),void 0!==t.length)t.push({title:$("#txtEvents").val(),start:getDate($("#txtDates").val()),backgroundColor:"red"}),localStorage.setItem("details",JSON.stringify(t));else{var a=[t,{title:$("#txtEvents").val(),start:getDate($("#txtDates").val()),backgroundColor:"red"}];localStorage.setItem("details",JSON.stringify(a))}else t={title:$("#txtEvents").val(),start:getDate($("#txtDates").val()),backgroundColor:"red"},localStorage.setItem("details",JSON.stringify(t));calendarRefresh()}else alert("Sorry it seems there is no local storage supported in your browser!!")})},getDate=function(e){var t=new Date;void 0!==e&&(t=new Date(e));var a=t.getFullYear(),l=t.getMonth()+1,r=t.getDate(),n=a+"-";return l<10&&(n+="0"),n+=l+"-",r<10&&(n+="0"),n+=r};
//# sourceMappingURL=data:application/json;base64,
